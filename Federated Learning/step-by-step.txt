# Initial setup
(cmd window) npx hardhat run 01_deploy_and_configure.cjs --network amoy

# Generate normal activity data
(cmd window) npx hardhat run 02_scenario_product_creation.cjs --network amoy
(cmd window) npx hardhat run-scenario03 --network amoy --tokenid1 <TOKEN_ID_1> --cid1 <IPFS_CID_FOR_TOKEN_1> --tokenid2 <TOKEN_ID_2> --cid2 <IPFS_CID_FOR_TOKEN_2> --tokenid3 <TOKEN_ID_3> --cid3 <IPFS_CID_FOR_TOKEN_3>
(cmd window) npx hardhat run 04_scenario_transport_and_ipfs.cjs --network amoy
(cmd window) npx hardhat run 05_scenario_batch_processing.cjs --network amoy
(cmd window) npx hardhat run 06_scenario_dispute_resolution.cjs --network amoy

# Train the initial model with normal data
(WSL Ubuntu) python fl_integration/run_sybil_detection.py
(WSL Ubuntu) python fl_integration/run_node_behavior_timeseries.py
(WSL Ubuntu) python fl_integration/run_batch_monitoring.py
(WSL Ubuntu) python fl_integration/run_dispute_risk.py
(WSL Ubuntu) python fl_integration/run_arbitrator_bias.py

# Attack simulation
(cmd window) npx hardhat run 07_simulate_sybil_attack.cjs --network amoy
(cmd window) npx hardhat run 08_simulate_bribery_attack.cjs --network amoy

# Retrain ALL models with anomalous data
(WSL Ubuntu) python fl_integration/run_sybil_detection.py
(WSL Ubuntu) python fl_integration/run_node_behavior_timeseries.py
(WSL Ubuntu) python fl_integration/run_batch_monitoring.py
(WSL Ubuntu) python fl_integration/run_dispute_risk.py
(WSL Ubuntu) python fl_integration/run_arbitrator_bias.py

# Validation and evaluation
(WSL Ubuntu) python fl_integration/validate_integration.py
(WSL Ubuntu) python fl_integration/validate_attack_detection.py